Question 1:

Sequential Search
- These are the elements in the array, with their positions shown below
    23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
   (00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13)

- First, through a for loop, the program goes through each position in the array
and checks the number stored in it.
    23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
        27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
            30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                   *41, 51, 55, 57, 60, 67, 72, 78, 83, 96

- If the program finds the number we are trying to find (41), it returns the 
numbers position in the array.
    4

Binary Search
- These are the elements in the array
    23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96

- The program calculates the middle number in the array by dividing the length
the array by 2 to find its position
    (14 / 2 = 7)
    23, 27, 30, 34, 41, 51, 55, *57*, 60, 67, 72, 78, 83, 96
   (00, 01, 02, 03, 04, 05, 06, *07*, 08, 09, 10, 11, 12, 13)

- The center number is not the number in question, so the program continues on
and checks if the number is larger or smaller that the center number, and it is
smaller (41 < 57).

- The program then looks to the left of the center number to search for 41 
by repeating the same steps - finding the center number, determining if the
number is less that the middle number or not, until the middle number becomes 41.
    23, 27, 30, *34,* 41, 51, 55
    41, *51,* 55
    *41*
- When it finds the number, it returns its position
    4


Question 2:

Bubble Sort
- These are th elements in the array
    25  30  20  80  40  60
   (00, 01, 02, 03, 04, 05)

- Through a for loop, each element is checked. If the element to the right is
smaller, the elements are SWAPPED.
   *25*  30  20  80  40  60
    25  *30* 20  80  40  60
    25   20 *30* 80  40  60
    25   20  30 *80* 40  60
    25   20  30  40 *80* 60
    25   20  30  40  60 *80*

- The loop starts over to check the elements that haven't been swapped yet.
   *25*  20  30   40   60  80
    20  *25* 30   40   60  80
    20   25  30   40   60  80

- The loop ends when all of the elements are in order of least to greatest.


Question 3:

Sample 7 elements:
    77  54  25  21  18  15  12
Make the number we are searching for 77

- The maximum number of comparisons for seven numbers is three.

1:
    77  54  25  *21*  18  15  12
- 77 is greater than 21, so check the left side.

2:
    77  *54*  25
- 77 is greater than 54, so check the left side.

3:
    *77*
- 77 is the same as the middle number, so that's the number.


Question 4:
Insertion sort is faster than selection sort for smaller groups of numbers,
however with larger, more disgusting groups of numbers both sorting algorithms
are basically equal in speed.

Question 5:
O(log n), or logarithmic time, is the fastest run time for an algorithm. This is 
because it divides the array to find the number it is searching for rather than 
searching every single elements in the array.
